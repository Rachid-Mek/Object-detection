
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
from filters import *
#from guitest import *
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage,font



# Initialize global variables
th = 130
type = 2
sizeDilate = 1
sizeErode = 1
sizeMorphEx = 1

# parameters

structure = 'rect'
morph_type = 'open'

label_values = ["gaussien", "laplacien", "erode", "dilate","morphex", "sobel", "emboss"]
struct_values = [ "rect", "cross"]
morph_values = [ "open", "close"]
imgRes_l = []



OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:/Users/User/Desktop/fifi/Master-2/vision/Tkinter-Designer-master/build/assets/frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def gaussian(image):
    method = 'gaussien'
    # Create a window and trackbar
    #cv2.namedWindow('result_l',  cv2.WINDOW_NORMAL)
    cv2.namedWindow('Trackbars',  cv2.WINDOW_NORMAL)
    # Set the desired width and height for the window
    new_width = 300
    new_height = 200

    # Resize the window
    cv2.resizeWindow('Trackbars', new_width, new_height)

    cv2.createTrackbar("Threshold", "Trackbars", th, 255, lambda x: changeTh(x, image))
    cv2.createTrackbar("Type", "Trackbars", type, 4, lambda x: changeType(x, image))

    # Create window 2

    cv2.namedWindow('result_2',  cv2.WINDOW_NORMAL)
    cv2.resizeWindow('result_2', 400, 400) 
    cv2.moveWindow('result_2', 900, 100)

    #resize image 
    filter(image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

def Laplacien(image):
    method = 'laplacien'
    # Create a window and trackbar
    #cv2.namedWindow('result_l',  cv2.WINDOW_NORMAL)
    cv2.namedWindow('Trackbars',  cv2.WINDOW_NORMAL)
    # Set the desired width and height for the window
    new_width = 300
    new_height = 200

    # Resize the window
    cv2.resizeWindow('Trackbars', new_width, new_height)
    cv2.createTrackbar("Threshold", "Trackbars", th, 255, lambda x: changeTh(x, image))
    cv2.createTrackbar("Type", "Trackbars", type, 4, lambda x: changeType(x, image))
    # Create window 2

    cv2.namedWindow('result_2',  cv2.WINDOW_NORMAL)
    cv2.resizeWindow('result_2', 400, 400) 
    cv2.moveWindow('result_2', 900, 100)

    #resize image 
    filter(image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

def Erode(image):
    method = 'erode'
    cv2.namedWindow('Trackbars',  cv2.WINDOW_NORMAL)
    new_width = 300
    new_height = 200

    # Resize the window
    cv2.resizeWindow('Trackbars', new_width, new_height)

    cv2.createTrackbar("Threshold", "Trackbars", th, 255, lambda x: changeTh(x, image))
    cv2.createTrackbar("Type", "Trackbars", type, 4, lambda x: changeType(x, image))
    cv2.createTrackbar('Struct', 'Trackbars', 0, len(struct_values) - 1, lambda x: changeStructure(x, image, struct_values))
    cv2.createTrackbar("sizeErode", "Trackbars", sizeErode, 21, lambda x: change_erode_size(x, image))

    # Create window 2

    cv2.namedWindow('result_2',  cv2.WINDOW_NORMAL)
    cv2.resizeWindow('result_2', 400, 400) 
    cv2.moveWindow('result_2', 900, 100)

    #resize image 
    filter(image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

def Dilate(image):
    method = 'dilate'

    cv2.namedWindow('Trackbars',  cv2.WINDOW_NORMAL)
    new_width = 300
    new_height = 200

    # Resize the window
    cv2.resizeWindow('Trackbars', new_width, new_height)

    cv2.createTrackbar("Threshold", "Trackbars", th, 255, lambda x: changeTh(x, image))
    cv2.createTrackbar("Type", "Trackbars", type, 4, lambda x: changeType(x, image))
    cv2.createTrackbar('Struct', 'Trackbars', 0, len(struct_values) - 1, lambda x: changeStructure(x, image, struct_values))
    cv2.createTrackbar("sizeDilate", "Trackbars", sizeDilate, 21, lambda x: change_dilate_size(x, image))

    cv2.namedWindow('result_2',  cv2.WINDOW_NORMAL)
    cv2.resizeWindow('result_2', 400, 400) 
    cv2.moveWindow('result_2', 900, 100)

    #resize image 
    filter(image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

def Morphex(image):
    method = 'morphex'
    cv2.namedWindow('Trackbars',  cv2.WINDOW_NORMAL)
    new_width = 300
    new_height = 200

    # Resize the window
    cv2.resizeWindow('Trackbars', new_width, new_height)

    cv2.createTrackbar("Threshold", "Trackbars", th, 255, lambda x: changeTh(x, image))
    cv2.createTrackbar("Type", "Trackbars", type, 4, lambda x: changeType(x, image))
    cv2.createTrackbar('Struct', 'Trackbars', 0, len(struct_values) - 1, lambda x: changeStructure(x, image, struct_values))
    cv2.createTrackbar('Morph', 'Trackbars', 0, len(morph_values) - 1, lambda x: changeMorphType(x, image, morph_values))
    cv2.createTrackbar("sizeMorph", "Trackbars", sizeMorphEx, 21, lambda x: change_morphEx_size(x, image))

    # Create window 2

    cv2.namedWindow('result_2',  cv2.WINDOW_NORMAL)
    cv2.resizeWindow('result_2', 400, 400) 
    cv2.moveWindow('result_2', 900, 100)

    #resize image 
    filter(image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
def Sobel(image):
    method = 'sobel'
    # Create a window and trackbar
    #cv2.namedWindow('result_l',  cv2.WINDOW_NORMAL)
    cv2.namedWindow('Trackbars',  cv2.WINDOW_NORMAL)
    # Set the desired width and height for the window
    new_width = 300
    new_height = 200

    # Resize the window
    cv2.resizeWindow('Trackbars', new_width, new_height)

    cv2.createTrackbar("Threshold", "Trackbars", th, 255, lambda x: changeTh(x, image))
    cv2.createTrackbar("Type", "Trackbars", type, 4, lambda x: changeType(x, image))

    # Create window 2

    cv2.namedWindow('result_2',  cv2.WINDOW_NORMAL)
    cv2.resizeWindow('result_2', 400, 400) 
    cv2.moveWindow('result_2', 900, 100)

    #resize image 
    filter(image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
def Emboss(image):
    method = 'emboss'
    # Create a window and trackbar
    #cv2.namedWindow('result_l',  cv2.WINDOW_NORMAL)
    cv2.namedWindow('Trackbars',  cv2.WINDOW_NORMAL)
    # Set the desired width and height for the window
    new_width = 300
    new_height = 200

    # Resize the window
    cv2.resizeWindow('Trackbars', new_width, new_height)

    cv2.createTrackbar("Threshold", "Trackbars", th, 255, lambda x: changeTh(x, image))
    cv2.createTrackbar("Type", "Trackbars", type, 4, lambda x: changeType(x, image))

    # Create window 2

    cv2.namedWindow('result_2',  cv2.WINDOW_NORMAL)
    cv2.resizeWindow('result_2', 400, 400) 
    cv2.moveWindow('result_2', 900, 100)

    #resize image 
    filter(image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
from tkinter import Toplevel

def newwind(image):

    if image is None:
       print('TEST FAIL',image) 
       image= cv2.imread('C:/Users/User/Desktop/fifi/Master-2/vision/Tkinter-Designer-master/build/imgprojet.jpg', cv2.IMREAD_GRAYSCALE)
         
    else :
        print('TEST',image)
        image=cv2.imread(image, cv2.IMREAD_GRAYSCALE)
        
    
    
    window2 = Toplevel()

    window2.geometry("816x879")
    window2.configure(bg = "#45BFD7")


    canvas2 = Canvas(
        window2,
        bg = "#45BFD7",
        height = 879,
        width = 816,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvas2.place(x = 0, y = 0)
    canvas2.create_rectangle(
        0.0,
        0.0,
        816.0,
        73.0,
        fill="#312D62",
        outline="")

    jolly_lodger_font = font.Font(family="Jolly Lodger", size=40)
    canvas2.create_text(
        44.0,
        12.0,
        anchor="nw",
        text="Project dashbord",
        fill="#FFFFFF",
        font=jolly_lodger_font
    )
    jolly_lodger_font = font.Font(family="Jolly Lodger", size=70)
    canvas2.create_text(
        110.0,
        103.0,
        anchor="nw",
        text="Choose the desired filter ",
        fill="#F88D0E",
        font=jolly_lodger_font
    )

    image_image_gui2 = PhotoImage(
        file=relative_to_assets("image_gui2.png"))
    image_1 = canvas2.create_image(
        435.0,
        628.0,
        image=image_image_gui2
    )

    button_image_9 = PhotoImage(
        file=relative_to_assets("button_9.png"))
    button_9 = Button(
        window2,
        image=button_image_9,
        borderwidth=0,
        highlightthickness=0,
        command=lambda:gaussian(image),
        relief="flat"
    )
    button_9.place(
        x=70.0,
        y=237.0,
        width=240.0,
        height=66.0
    )

    button_image_15 = PhotoImage(
        file=relative_to_assets("button_15.png"))
    button_15 = Button(
        window2,
        image=button_image_15,
        borderwidth=0,
        highlightthickness=0,
        command=lambda:Laplacien(image),
        relief="flat"
    )
    button_15.place(
        x=471.0,
        y=230.0,
        width=240.0,
        height=66.0
    )

    button_image_10 = PhotoImage(
        file=relative_to_assets("button_10.png"))
    button_10 = Button(
        window2,
        image=button_image_10,
        borderwidth=0,
        highlightthickness=0,
        command=lambda:Erode(image),
        relief="flat"
    )
    button_10.place(
        x=70.0,
        y=377.0,
        width=240.0,
        height=66.0
    )

    button_image_11 = PhotoImage(
        file=relative_to_assets("button_11.png"))
    button_11 = Button(
        window2,
        image=button_image_11,
        borderwidth=0,
        highlightthickness=0,
        command=lambda:Dilate(image),
        relief="flat"
    )
    button_11.place(
        x=471.0,
        y=377.0,
        width=240.0,
        height=66.0
    )

    button_image_12 = PhotoImage(
        file=relative_to_assets("button_12.png"))
    button_12 = Button(
        window2,
        image=button_image_12,
        borderwidth=0,
        highlightthickness=0,
        command=lambda:Morphex(image),
        relief="flat"
    )
    button_12.place(
        x=75.0,
        y=524.0,
        width=240.0,
        height=66.0
    )

    button_image_13 = PhotoImage(
        file=relative_to_assets("button_13.png"))
    button_13 = Button(
        window2,
        image=button_image_13,
        borderwidth=0,
        highlightthickness=0,
        command=lambda:Emboss(image),
        relief="flat"
    )
    button_13.place(
        x=471.0,
        y=524.0,
        width=240.0,
        height=66.0
    )

    button_image_14 = PhotoImage(
        file=relative_to_assets("button_14.png"))
    button_14 = Button(
        window2,
        image=button_image_14,
        borderwidth=0,
        highlightthickness=0,
        command=lambda:Sobel(image),
        relief="flat"
    )
    button_14.place(
        x=285.0,
        y=648.0,
        width=240.0,
        height=66.0
    )
    window2.resizable(False, False)
    window2.mainloop()

